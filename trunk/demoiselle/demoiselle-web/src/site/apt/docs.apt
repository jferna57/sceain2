                                    ------
                                    Documentação Web
~~Demoiselle Framework
~~Copyright (c) 2009 Serpro and other contributors as indicated
~~by the @author tag. See the copyright.txt in the distribution for a
~~full listing of contributors.
~~
~~Demoiselle Framework is an open source Java EE library designed to accelerate
~~the development of transactional database Web applications.
~~
~~Demoiselle Framework is released under the terms of the LGPL license 3
~~http://www.gnu.org/licenses/lgpl.html  LGPL License 3
~~
~~This file is part of Demoiselle Framework.
~~
~~Demoiselle Framework is free software: you can redistribute it and/or modify
~~it under the terms of the GNU Lesser General Public License 3 as published by
~~the Free Software Foundation.
~~
~~Demoiselle Framework is distributed in the hope that it will be useful,
~~but WITHOUT ANY WARRANTY; without even the implied warranty of
~~MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~GNU Lesser General Public License for more details.
~~
~~You should have received a copy of the GNU Lesser General Public License
~~along with Demoiselle Framework.  If not, see <http://www.gnu.org/licenses/>.
                                    
Documentação {Web}

%{toc|section=1|fromDepth=1|toDepth=2}
  
* {Contexto de Segurança} {{{Web}^}}

  Implementa o contexto de segurança proposto no módulo Core através de um
singleton que é inicializado a cada requisição do usuário com informações de
autenticação e autorização.

[images/security.png] br.gov.framework.demoiselle.web.security

  O pacote <<br.gov.framework.demoiselle.web.security>> é composto por três classes:

   * <<WebSecurityContext>>: Implementa o contexto de segurança através do padrão singleton.
Gerencia os dados de segurança vinculados a <thread> corrente;

   * <<WebSecurityServletListener>>: Pode ser usado para inicializar SecurityContext no evento de requisição.]
   
   * <<WebSecurityException>>: Exceção usada pelos componentes do contexto de segurança.

* {Integração entre Camadas} {{{Web}^}}

  O módulo Web implementa a especificação de integração de camadas
proposto pelo módulo Core. O mecanismo implementado utiliza {{{http://pt.wikipedia.org/wiki/Programa%C3%A7%C3%A3o_orientada_a_aspecto}AOP}} 
para detectar os pontos de integração. Permite que sejam implementadas novas fábricas de acordo
com a necessidade da aplicação.

[images/integration.png] br.gov.framework.demoiselle.web.layer.integration

  O pacote <<br.gov.framework.demoiselle.web.layer.integration>> faz uso das seguintes classes:
  
   * <<InjectionManager>>: Mecanismo de injeção de dependência;  

   * <<PersistenceLayerIntegrationException>>: Exceção usada pelos componentes da camada de integração Web;  
  
   * <<WebBusinessControllerFactory>>: Implementação padrão da fábrica de objetos de negócio;
   
   * <<WebFactoryConfig>>: Representa as configurações para as classes <<WebBusinessControllerFactory>> e <<WebDAOFactory>>;

   * <<WebDAOFactory>>: Implementação padrão da fábrica de objetos de persistência;

   * <<WebFactoryConfig>>: Classe de configuração que diz qual o padrão define a classe de implementação.
   
  Esse pacote ainda define o aspecto <<InjectionAspect>>, que captura os pontos onde ocorrerá a injeção.   .

  A implementação padrão da fábrica de injeção define um mecanismo para a formação do nome da classe de implementação através de Expressões regulares.
Este mecanismo recebe dois conjuntos de Strings, o primeiro contendo as expressões regulares que deverão ser buscadas no nome da classe de Interface.
Para cada expressão regular do primeiro conjunto existirá uma String de substituição (replace) associada no segundo grupo.
  Tanto as expressões regulares quanto as Strings de replace são cadastradas no arquivo de propriedades do demoiselle. 
Há duas opções de cadastro, uma genérica, para todas as injeções do projeto e outra mais específica, contendo detalhes da injeção por camada.
Na primeira opção, o desenvolvedor deve cadastrar os seguintes atributos: <<framework.demoiselle.web.injection.regex>> e 
<<framework.demoiselle.web.injection.replace>>. Para a segunda opção, o nome das propriedades deve indicar qual camada ela se refere:
<<framework.demoiselle.web.injection.dao.regex>> e <<framework.demoiselle.web.injection.dao.replace>> para a camada DAO e
<<framework.demoiselle.web.injection.business.regex>> e <<framework.demoiselle.web.injection.business.replace>> para a camada Business Controller.

  * Prioridade (maior=1 e menor=4)
    1. Propriedade name da anotação de injeção
    2. Conjunto regex/replace de uma camada específica (ex.: ...dao.regex e dao.replace; ...business.regex e ...business.replace)
    3. Conjunto regex/replace genérico (framework.demoiselle.web.injection.regex e framework.demoiselle.web.injection.replace)
    4. Valores default (replace=\\.I e regex=.implementation.) 
  
  Exemplo de utilização
  
  * <<Injeção do DAO>>
    Interface exemplo: br.gov.serpro.demoiselle.aluno.IntfAlunoDAO
    Implementação esperada: br.gov.serpro.demoiselle.aluno.implentation.AlunoDAOImpl
    <<framework.demoiselle.web.injection.dao.regex>>=\\.Intf, $
    <<framework.demoiselle.web.injection.dao.replace>>=.implementation, Impl
    
    A primeira regex (\\.Intf) será substituída pelo primeiro replace (.implementation) e o segundo regex ($, fim de linha) será substituído
  pelo segundo replace (Impl)
   
* {Transação} {{{Web}^}}

  O módulo Web implementa a especificação do contexto transacional proposto
no módulo Core. É possível utilizar o controle transacional do contêiner 
({{{http://java.sun.com/javaee/technologies/jta/index.jsp}JTA}}) para isso
deve existir uma implementação de um mecanismo de lookup via {{{http://java.sun.com/products/jndi/}JNDI}}.

[images/transaction.png] br.gov.framework.demoiselle.web.transaction

  O pacote <<br.gov.framework.demoiselle.web.transaction>> provê a interface <<IJNDITransactionManagerLookup>>,
que é a definição de informações para o mecanismo JNDI localizar uma
UserTransaction do contêiner com suporte JTA.
  
  Ele ainda contém as classes:
  
   * <<JBOSSTransactionManagerLookup>>: Implementação para {{{http://www.jboss.org/jbossas/docs/}JBoss}}.
  
   * <<WebTransactionAction>>: Implementação da interface IAction;
   
   * <<WebTransactionActionConfig>>: Classe de configuração da ação de transação;
  
   * <<WebTransactionContext>>: Implementação padrão do contexto transacional;
   
   * <<WebTransactionServletRequestListener>>: Controlador do contexto transacional. 
Responsável por iniciar e finalizar, normal ou com erro, o contexto transacional. É acionado
em TODAS as requisições web.
   
  Esse pacote ainda define a exceção <<WebTransactionException>>.
   

* {Inicialização do Ambiente} {{{Web}^}}

  A inicialização de ambiente implementa a especificação de ações proposto no
módulo Core, essa inicialização ocorre sempre que o contêiner iniciar a aplicação.
O módulo Web necessita que algumas ações sejam executadas, essas ações estão
implementadas nesse módulo. Os componentes e aplicações baseadas no <framework>
podem implementar outras ações e adicioná-las para que sejam executadas na
inicialização do ambiente.

[images/init.png] br.gov.framework.demoiselle.web.init

  A inicialização de aplicações Web é feita por meio de <Servlet>. As classes do 
pacote <<br.gov.framework.demoiselle.web.init>> são:

   * <<WebInitializationLoaderAction>>: Carregador padrão da ação de inicialização; 
   
   * <<WebInitializationLoaderActionConfig>>: Representa a configuração para <<WebInitializationLoaderAction>>;  
   
   * <<WebInitializationServletListener>>: Um <ServletContextListener> pode ser usado para executar ações durante a inicialização.
   
   * <<IInitializationAction>>: Especialização de um <<IAction>>. 

  Esse pacote ainda define a exceção <<WebInitializationException>>.     

* {Redirecionamento baseado em URL} {{{Web}^}}

  O módulo Web implementa um mecanismo de redirecionamento baseado em
URL que será usado por componentes web que necessitarem dessa funcionalidade.
Esse mecanismo é baseado na especificação de ações definido no módulo Core.

[images/redirect.png] br.gov.framework.demoiselle.web.redirect

  As classes definidas pelo pacote <<br.gov.framework.demoiselle.web.redirect>> são:
  
   * <<WebRedirectServlet>>: Servlet que executará todas as actions de redirecionamento;
   
   * <<WebRedirectLoaderAction>>: Carrega todas as classes de ações de redirecionamento;
   
   * <<WebRedirectLoaderActionConfig>>: Configurações da classe de carregamento de ações;  

   * <<WebRedirectActionManager>>: Busca e executa a action de redirecionamento.  
   
  Ele ainda conta a interface <<IRedirectAction>>, que é uma especialização 
da interface IAction e que define informações necessárias para o 
redirecionamento. 
  A exceção padrão definida nesse pacote é <<WebRedirectException>>.
  
* {Contexto de Mensagem} {{{Web}^}}

  A classe <<WebMessageContext>> do pacote <<br.gov.framework.demoiselle.web.message>> implementa
a interface <<IMessageContext>> para este módulo.

[images/message.png] br.gov.framework.demoiselle.web.message

   As classes definidas pelo pacote <<br.gov.framework.demoiselle.web.message>> são:

   * <<WebMessageAction>>: Inicia um contexto de mensagens Web;
   
   * <<WebMessageContext>>: Estrutura que implementa um contexto de mensagem para ser usado pelas
   aplicações Web.
   