                                    ------
                                    Documentação Core
~~Demoiselle Framework
~~Copyright (c) 2009 Serpro and other contributors as indicated
~~by the @author tag. See the copyright.txt in the distribution for a
~~full listing of contributors.
~~
~~Demoiselle Framework is an open source Java EE library designed to accelerate
~~the development of transactional database Web applications.
~~
~~Demoiselle Framework is released under the terms of the LGPL license 3
~~http://www.gnu.org/licenses/lgpl.html  LGPL License 3
~~
~~This file is part of Demoiselle Framework.
~~
~~Demoiselle Framework is free software: you can redistribute it and/or modify
~~it under the terms of the GNU Lesser General Public License 3 as published by
~~the Free Software Foundation.
~~
~~Demoiselle Framework is distributed in the hope that it will be useful,
~~but WITHOUT ANY WARRANTY; without even the implied warranty of
~~MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~GNU Lesser General Public License for more details.
~~
~~You should have received a copy of the GNU Lesser General Public License
~~along with Demoiselle Framework.  If not, see <http://www.gnu.org/licenses/>.
                                    
Documentação {Core}

%{toc|section=1|fromDepth=1|toDepth=2}

* {Definição de Camadas} {{{Core}^}}

  O <framework> propõe para as aplicações a divisão entre três camadas distintas:
<<Visão>>, <<Negócio>> e <<Persistência>>. Uma fachada pode ser definida quando a 
aplicação trata de integração entre módulos ou integração de subsistemas.

[images/layer-definition.png] br.gov.framework.demoiselle.core.layer

  O pacote <<br.gov.framework.demoiselle.core.layer>> define abstrações para os objetos de camada.
As interfaces constantes na figura acima tem os seguintes propósitos:

   * <<IViewController>>: Abstração para o objeto da camada de visão; 
   
   * <<IBusinessController>>: Abstração para o objeto da camada de negócio; 
   
   * <<IDAO>>: Abstração para o objeto da camada de persistência;
   
   * <<IFacade>>: Abstração para o objeto da camada de integração de módulos/subsistemas.         
     
* {Integração entre Camadas} {{{Core}^}}

  Utilização de padrões de projeto tais como <Factory>, <Proxy>, <IoC> e injeção de
dependências para manter a integração de camadas em um nível de acoplamento
baixo afim de garantir uma melhor manutenção e escrita/legibilidade das classes
representantes de cada camada.

  O mecanismo de integração entre camadas atuará na camada de visão injetando objetos
de negócio através de uma fábrica do próprio <framework> ou alguma fábrica definida pela
aplicação e esta fábrica poderá utilizar um <proxy>, do <framework> ou da aplicação, para a
instanciação do objeto de negócio.

  O mecanismo de integração entre camadas atuará também na camada de regras de negócio
injetando objetos de persistência através de uma fábrica do próprio <framework> ou
alguma fábrica definida pela aplicação e esta fábrica poderá utilizar um <proxy>,
do <framework> ou da aplicação, para a instanciação do objeto de persistência.

[images/layer-integration.png] br.gov.framework.demoiselle.core.layer.integration

  O pacote <<br.gov.framework.demoiselle.core.layer.integration>> define uma abstração para
o mecanismo de integração entre camadas.As interfaces constantes na figura acima
tem os seguintes propósitos:
  
   * <<IFactory>>: Abstração de fábricas de objetos injetados pelo mecanismo de integração;
   
   * <<IBusinessControllerFactory>>: Especialização da fábrica de objetos de negócio; 
   
   * <<IDAOFactory>>: Especialização da fábrica de objetos de persistência. 
   
  Há duas anotações definidas nesse pacote:

   * <<Injection>>: <Annotation> de propriedade que contém informações a respeito da injeção
de dependência. 

   * <<Factory>>: <Annotation> de classe ou pacote usada para definir a implementação da
fábrica utilizada na injeção de dependência.

  Este pacote já define uma classe concreta, <<InjectionContext>>, que
tem por objetivo armazenar as informações necessárias para a fábrica 
realizar a criação dos objetos.

* {Contexto de Mensagens} {{{Core}^}}

  Define uma abstração de mensagens trocadas durante uma requisição entre as
camadas dos sistemas. Permite criar contexto de mensagens para que todas as
camadas da arquitetura possam manipular mensagens. Auxilia a exibição das
mensagens para o usuário, seja na forma de tela, arquivo texto (log), em banco de
dados ou na junção dessas opções. Cada implementação desta especificação deverá
prover uma solução de acesso ao contexto.

[images/message-context.png] br.gov.framework.demoiselle.core.message

  O pacote <<br.gov.framework.demoiselle.core.message>> consiste de um mecanismo de 
passagem de mensagem entre camadas.
  Ele define duas interfaces:
  
   *<<IMessage>>: Abstração da unidade de mensagem; 
   
   *<<IMessageContext>>: Abstração do contexto de mensagem.
   
  Esse pacote também tem um tipo enumerado, <<Severity>>, que é lista de severidades
de mensagem.  

* {Exceção} {{{Core}^}}

  O <framework> define uma exceção padrão para ser utilizada pelas aplicações.
Essa exceção encapsula uma mensagem padronizada para facilitar o tratamento pelos
módulos do <framework>.

[images/exception.png] br.gov.framework.demoiselle.core.exception       

* {Contexto de Segurança} {{{Core}^}}

  O <framework> especifica uma forma padrão de acesso aos dados de segurança
referente a autenticação e autorização através de papeis. Cada implementação
da interface <<ISecurityContext>> deverá prover uma solução de acesso ao contexto.

[images/security.png] br.gov.framework.demoiselle.core.security

* {Entidades} {{{Core}^}}

  O framework propõe uma abstração para as entidades da aplicação, a interface <<IPojo>>.
Detalhes sobre como utilizar essa interface podem ser vistos na documentação do módulo
de Persistência em 
{{{http://framework.serpro/relatorios/46902gestaofwkjee/framework/framework-persistence/docs.html#Cria%C3%A7%C3%A3o_de_Classe_POJO}Criação de Classe Pojo}}.   

[images/bean.png] br.gov.framework.demoiselle.core.bean

* {Transação} {{{Core}^}}

  Especificação de mecanismo de controle transacional. Define um contexto
transacional que atua no início e fim de cada ação executada pelos 
artefatos de cada camada. Seu funcionamento depende de um tipo definido,
seja LOCAL ou {{{http://java.sun.com/javaee/technologies/jta/index.jsp}JTA}}.
O tipo <<LOCAL>> indica que a implementação é responsável por gerenciar
a transação, e no caso do tipo JTA, a especificação necessitará de uma
implementação JTA disponível.

[images/transaction.png] br.gov.framework.demoiselle.core.transaction

  O pacote <<br.gov.framework.demoiselle.core.transaction>> define duas interfaces:
  
  * <<ITransactionResource>>: Define um recurso a ser registrado no contexto
de transação;
  
  * <<ITransactionContext>>: Contexto de transação responsável por registrar o
início e fim de cada ação e registrar recursos transacionais.

  Ele também define um tipo enumerado, <<TransactionType>> que contém os possíveis
tipos de funcionamento do mecanismo de controle de transação.

  O módulo Web faz uma implementação desse mecanismo. Isso pode ser visto na documentação
de {{{http://framework.serpro/relatorios/46902gestaofwkjee/framework/framework-web/docs.html#Transa%C3%A7%C3%A3o}Transação}}
do módulo Web.  

* {Acionadores} {{{Core}^}}

  O pacote <<br.gov.framework.demoiselle.core.action>> define um mecanismo padronizado 
de ações a serem executadas aplicação. Essas ações são definidas como
funções estruturais da aplicação, que não se referem diretamente a regras
de negócio, como por exemplo carregamento de configuração,inicialização
de ambiente, etc.

[images/action.png] br.gov.framework.demoiselle.core.action

  A interface <<IAction>> representa uma ação. <<ILoaderAction>> define o 
mecanismo de recuperação das ações, enquanto <<IActionManager>> executa
ações que foram recuperadas por esse mecanismo.

* {Localizador de Contextos} {{{Core}^}}

  Para que as camadas das aplicações baseadas no <framework> possam usufruir
dos contextos definidos no módulo lógico <Core>, a existência de um localizador
é fundamental. As implementações de cada contexto deverão fazer uso deste
localizador de contextos para que outras camadas possam utilizá-lo.

[images/context-locator.png] br.gov.framework.demoiselle.core.context  
  
  A classe <<ContextLocator>> implementa um mecanismo de localização de contextos.