                                    ------
                                    Documentação Persistence
~~Demoiselle Framework
~~Copyright (c) 2009 Serpro and other contributors as indicated
~~by the @author tag. See the copyright.txt in the distribution for a
~~full listing of contributors.
~~
~~Demoiselle Framework is an open source Java EE library designed to accelerate
~~the development of transactional database Web applications.
~~
~~Demoiselle Framework is released under the terms of the LGPL license 3
~~http://www.gnu.org/licenses/lgpl.html  LGPL License 3
~~
~~This file is part of Demoiselle Framework.
~~
~~Demoiselle Framework is free software: you can redistribute it and/or modify
~~it under the terms of the GNU Lesser General Public License 3 as published by
~~the Free Software Foundation.
~~
~~Demoiselle Framework is distributed in the hope that it will be useful,
~~but WITHOUT ANY WARRANTY; without even the implied warranty of
~~MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
~~GNU Lesser General Public License for more details.
~~
~~You should have received a copy of the GNU Lesser General Public License
~~along with Demoiselle Framework.  If not, see <http://www.gnu.org/licenses/>.
                                    
Documentação {Persistence}

%{toc|section=1|fromDepth=1|toDepth=4}

* {Pacotes} {{{Persistence}^}}

** {<<br.gov.framework.demoiselle.persistence>>} {{{Persistence}^}}

[images/persistence.png] br.gov.framework.demoiselle.persistence

  Responsável por implementar a camada de persistência definida no Módulo Lógico Core.
  
  Este módulo provê implementações para as especificações e tecnologias relacionadas à
  persistência, tais como o JPA (Java Persistence API),
  o JDBC (Java Database Connectivity) e o Hibernate.
  
  * <<IORMDAO>>
  
  Interface que define os métodos a serem implementados
  pelas especializações de DAO para soluções {{{http://pt.wikipedia.org/wiki/ORM}ORM}}.
  
  * <<JPAGenericDAO>>
  
  Classe que implementa a interface <<IDAO>> para objetos de acesso a dados (<Data Access Object>).

  Aplicações que utilizam a solução JPA (Java Persistence API) devem herdar esta
  classe genérica a fim de reduzir a quantidade de código e promover a reusabilidade.
  
  * <<JPATransactionResource>>
  
  Classe que representa uma transação JPA.
  
  * <<EntityManagerProxy>>
  
  Classe baseada no padrão de projeto <Proxy> com o objetivo de capturar as chamadas
  ao <EntityManager>, que será encapsulado em uma instância do <proxy>.

  * <<PersistenceHandler>>
  
  Classe destinada ao gerenciamento de fábricas de unidades de persistência (<persistence units>) JPA. 

  * <<PersistenceException>>
  
  Exceção utilizada pelos componentes de persistência.

** {<<br.gov.framework.demoiselle.persistence.hibernate>>} {{{Persistence}^}}

[images/persistence-hibernate.png] br.gov.framework.demoiselle.persistence.hibernate

  Este pacote contém as especializações para a solução ORM {{{http://www.hibernate.org/}Hibernate}}. 
  Disponibiliza as seguintes classes:

  * <<HibernateGenericDAO>>
   
  Implementações de métodos definidos em <<IDAO>> e <<IORMDAO>>. As
  aplicações que utilizarem a solução hibernate poderão herdar esta
  classe a fim de diminuir a quantidade de implementações das
  interfaces <<IDAO>> e <<IORMDAO>>;

  * <<HibernateUtil>>
   
  Classe utilitária para as configurações do Hibernate e também
  responsável por inserir a transação Hibernate no Controle
  Transacional definido no Módulo Lógico Core;

  * <<HibernateTransactionResource>>
   
  Classe que representa uma transação Hibernate.
  
  * <<PersistenceHibernateException>>
  
  Exceção utilizada pelo componente de persistência Hibernate.
  
** {<<br.gov.framework.demoiselle.persistence.jdbc>>} {{{Persistence}^}}

[images/persistence-jdbc.png] br.gov.framework.demoiselle.persistence.jdbc

  Este pacote contém as especializações para desenvolvimento com drivers {{{http://java.sun.com/javase/technologies/database/}JDBC}}. 
  Disponibiliza as seguintes classes:

  * <<JDBCGenericDAO>>: 
   
  Implementação de alguns métodos de <<IDAO>> a fim de diminuir o
  trabalho do desenvolvedor e padronizar o código;

  * <<JDBCUtil>>:
   
  Classe utilitária para as configurações JDBC e também
  responsável por inserir uma conexão no Controle Transacional
  definido no Módulo Lógico Core.

  * <<JDBCTransactionResource>>:
   
  Classe que representa uma conexão JDBC.
  
  * <<PersistenceJDBCException>>
  
  Exceção utilizada pelo componente de persistência Hibernate.
  
  * <<JDBCConfig>>
  
  Classe utilitária para as configurações nativas do JDBC.

** {<<br.gov.framework.demoiselle.persistence.layer.integration>>} {{{Persistence}^}}

[images/persistence-layer-integration.png] br.gov.framework.demoiselle.persistence.layer.integration

  Este pacote contém componentes utilitários para integração da camada de persistência.

  * <<PersistenceEntityManagerFactory>>
  
  Fábrica de objetos <EntityManager> baseados nas unidades de persitência disponíveis no JPA.

  * <<IEntityManagerFactory>>
  
  Fábrica utilizada durante a criação de objetos <EntityManager> no JPA.
  
  * <<DefaultPersistenceUnit>>
  
  Anotação utilizada para definir a unidade de persistência padrão no JPA.
  
  * <<PersistenceEntityManagerFactoryConfig>>
  
  Representa uma configuração para a classe <<PersistenceEntityManagerFactory>>.
  
  *  <<PersistenceLayerIntegrationException>>
  
  Exceção utilizada pelos componentes de integração da camada de persistência.
